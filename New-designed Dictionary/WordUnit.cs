//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace New_designed_Dictionary
{
    using New_designed_Dictionary.ViewModels;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using VDS.RDF.Query;

    public partial class WordUnit
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public WordUnit()
        {
            this.Sources = new HashSet<Source>();
            this.PartsOfSpeeches = new HashSet<PartsOfSpeech>();
            this.Tags = new HashSet<Tag>();
        }
    
        public int Id { get; set; }
        public string ContentOfUnit { get; set; }
        public string Meaning { get; set; }
        public string Example { get; set; }
        public string Note { get; set; }
        public bool IsFormal { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Source> Sources { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<PartsOfSpeech> PartsOfSpeeches { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Tag> Tags { get; set; }

        public static VMWordUnit WordUnitFromQueryResult(SparqlResult r)
        {
            VMWordUnit wu = new VMWordUnit();
            List<string> allSources = new List<string>();
            foreach (var v in r.ToList())
            {
                switch (v.Key)
                {
                    case "word":
                        {
                            wu.ContentOfUnit = v.Value.ToString().Replace(Resources.Paths.Ontology_Base, "");
                            break;
                        }
                    case "meaning":
                        {
                            wu.Meaning = v.Value.ToString().Replace(Resources.Paths.Ontology_Base, "").Replace("_", " ");
                            break;
                        }
                    case "example":
                        {
                            wu.Example = v.Value.ToString().Replace(Resources.Paths.Ontology_Base, "").Replace("_", " ").Replace("''", "\"");
                            break;
                        }
                    case "note":
                        {
                            wu.Note = v.Value.ToString().Replace(Resources.Paths.Ontology_Base, "").Replace("_", " ").Replace("''", "");
                            break;
                        }
                    case "source":
                        {
                            wu.SourceName = v.Value.ToString().Replace(Resources.Paths.Ontology_Base, "").Replace("_", " ").Replace("'", "");
                            break;
                        }
                }
            }

            foreach (SparqlResult sr in (SparqlResultSet)OntologyProcessor.GetIndividualQueryResults(Resources.Queries.Query_Indiv_Sources))
            {
                foreach (var variable in sr.ToList())
                {
                    allSources.Add(variable.Value.ToString().Replace(Resources.Paths.Ontology_Base, "").Replace("_", " ").Replace("'", ""));
                }
            }

            wu.AllSources = allSources;

            return wu;
        }
    }
}
